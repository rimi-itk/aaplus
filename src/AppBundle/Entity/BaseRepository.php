<?php

/*
 * This file is part of aaplusplus.
 *
 * (c) 2019 ITK Development
 *
 * This source file is subject to the MIT license.
 */

namespace AppBundle\Entity;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Form\FormInterface;

/**
 * BygningRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BaseRepository extends EntityRepository
{
    private $container;

    /**
     * Check if a User has access to a Bygning.
     *
     * @param User    $user
     * @param Bygning $bygning
     *
     * @return bool
     */
    public function hasAccess(User $user, Bygning $bygning)
    {
        if ($this->hasFullAccess($user)) {
            return true;
        }

        if ($bygning->getEnergiRaadgiver() === $user) {
            return true;
        }

        if ($bygning->getProjektleder() === $user) {
            return true;
        }

        if ($bygning->getProjekterende() === $user) {
            return true;
        }

        $bygninger = $this->findBygningerByUser($user);

        return $bygninger && \in_array($bygning, $bygninger, true);
    }

    public function setContainer(ContainerInterface $container)
    {
        $this->container = $container;

        return $this;
    }

    public function findAtTime(DateTime $timestamp, FormInterface $form)
    {
        return $this->container->get('aaplus.entityaudit.reader')
            ->setFilter($form)
            ->getEntitiesAtTime($this->getClassName(), $timestamp);
    }

    /**
     * The ugly function to check if a user is allowed to do everything â€¦.
     *
     * @param $user
     *
     * @return bool
     */
    protected function hasFullAccess($user)
    {
        return $user && $user->hasRole('ROLE_ADMIN');
    }

    /**
     * Limit Query to buildings user has access to.
     *
     * @param User         $user
     * @param QueryBuilder $qb
     * @param bool         $onlyOwnBuildings
     * @param string       $buildingAlias
     */
    protected function limitQueryToUserAccess(
        User $user,
        QueryBuilder $qb,
        $onlyOwnBuildings = false,
        $buildingAlias = 'b'
    ) {
        if (!$this->hasFullAccess($user)) {
            $qb->andWhere(':user MEMBER OF '.$buildingAlias.'.users');
            $qb->setParameter('user', $user);
            $qb->orWhere($buildingAlias.'.energiRaadgiver = :energiRaadgiver');
            $qb->setParameter('energiRaadgiver', $user);
            $qb->orWhere($buildingAlias.'.projektleder = :projektleder');
            $qb->setParameter('projektleder', $user);
            $qb->orWhere($buildingAlias.'.projekterende = :projekterende');
            $qb->setParameter('projekterende', $user);
        } elseif ($onlyOwnBuildings) {
            $qb->andWhere('b.aaplusAnsvarlig = :aaplusAnsvarlig');
            $qb->setParameter('aaplusAnsvarlig', $user);
        }
    }

    private function findBygningerByUser($user)
    {
        $em = $this->_em->getRepository('AppBundle:Bygning');
        $bygninger = $em->findByUser($user);

        return $bygninger;
    }
}
